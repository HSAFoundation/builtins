// Autogenerated, do not edit

#if defined USE_APPLE || defined GPU_NO_RELATIONAL
__attribute__((overloadable, weak, always_inline)) int
isordered(float x, float y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int2
isordered(float2 x, float2 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int3
isordered(float3 x, float3 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int4
isordered(float4 x, float4 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int8
isordered(float8 x, float8 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int16
isordered(float16 x, float16 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int
isordered(double x, double y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) long2
isordered(double2 x, double2 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) long3
isordered(double3 x, double3 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) long4
isordered(double4 x, double4 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) long8
isordered(double8 x, double8 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) long16
isordered(double16 x, double16 y)
{
    return !isunordered(x, y);
}

__attribute__((overloadable, weak, always_inline)) int
isnormal(float x)
{
    return isfinite(x) & (fabs(x) >= FLT_MIN);
}

__attribute__((overloadable, weak, always_inline)) int2
isnormal(float2 x)
{
    return isfinite(x) & (fabs(x) >= FLT_MIN);
}

__attribute__((overloadable, weak, always_inline)) int3
isnormal(float3 x)
{
    return isfinite(x) & (fabs(x) >= FLT_MIN);
}

__attribute__((overloadable, weak, always_inline)) int4
isnormal(float4 x)
{
    return isfinite(x) & (fabs(x) >= FLT_MIN);
}

__attribute__((overloadable, weak, always_inline)) int8
isnormal(float8 x)
{
    return isfinite(x) & (fabs(x) >= FLT_MIN);
}

__attribute__((overloadable, weak, always_inline)) int16
isnormal(float16 x)
{
    return isfinite(x) & (fabs(x) >= FLT_MIN);
}

__attribute__((overloadable, weak, always_inline)) int
isnormal(double x)
{
    return isfinite(x) & (fabs(x) >= DBL_MIN);
}

__attribute__((overloadable, weak, always_inline)) long2
isnormal(double2 x)
{
    return isfinite(x) & (fabs(x) >= DBL_MIN);
}

__attribute__((overloadable, weak, always_inline)) long3
isnormal(double3 x)
{
    return isfinite(x) & (fabs(x) >= DBL_MIN);
}

__attribute__((overloadable, weak, always_inline)) long4
isnormal(double4 x)
{
    return isfinite(x) & (fabs(x) >= DBL_MIN);
}

__attribute__((overloadable, weak, always_inline)) long8
isnormal(double8 x)
{
    return isfinite(x) & (fabs(x) >= DBL_MIN);
}

__attribute__((overloadable, weak, always_inline)) long16
isnormal(double16 x)
{
    return isfinite(x) & (fabs(x) >= DBL_MIN);
}

__attribute__((overloadable, weak, always_inline)) int
isinf(float x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int2
isinf(float2 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int3
isinf(float3 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int4
isinf(float4 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int8
isinf(float8 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int16
isinf(float16 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int
isinf(double x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long2
isinf(double2 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long3
isinf(double3 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long4
isinf(double4 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long8
isinf(double8 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long16
isinf(double16 x)
{
    return fabs(x) == INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int
signbit(float x)
{
    return as_int(x) < 0;
}

__attribute__((overloadable, weak, always_inline)) int
signbit(double x)
{
    return as_long(x) < 0L;
}

__attribute__((overloadable, weak, always_inline)) int2
signbit(float2 x)
{
    return as_int2(x) < 0;
}

__attribute__((overloadable, weak, always_inline)) long2
signbit(double2 x)
{
    return as_long2(x) < 0L;
}

__attribute__((overloadable, weak, always_inline)) int3
signbit(float3 x)
{
    return as_int3(x) < 0;
}

__attribute__((overloadable, weak, always_inline)) long3
signbit(double3 x)
{
    return as_long3(x) < 0L;
}

__attribute__((overloadable, weak, always_inline)) int4
signbit(float4 x)
{
    return as_int4(x) < 0;
}

__attribute__((overloadable, weak, always_inline)) long4
signbit(double4 x)
{
    return as_long4(x) < 0L;
}

__attribute__((overloadable, weak, always_inline)) int8
signbit(float8 x)
{
    return as_int8(x) < 0;
}

__attribute__((overloadable, weak, always_inline)) long8
signbit(double8 x)
{
    return as_long8(x) < 0L;
}

__attribute__((overloadable, weak, always_inline)) int16
signbit(float16 x)
{
    return as_int16(x) < 0;
}

__attribute__((overloadable, weak, always_inline)) long16
signbit(double16 x)
{
    return as_long16(x) < 0L;
}

__attribute__((overloadable, weak, always_inline)) int
isfinite(float x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int2
isfinite(float2 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int3
isfinite(float3 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int4
isfinite(float4 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int8
isfinite(float8 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int16
isfinite(float16 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int
isfinite(double x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long2
isfinite(double2 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long3
isfinite(double3 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long4
isfinite(double4 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long8
isfinite(double8 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) long16
isfinite(double16 x)
{
    return fabs(x) < INFINITY;
}

__attribute__((overloadable, weak, always_inline)) int
isunordered(float x, float y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) int2
isunordered(float2 x, float2 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) int3
isunordered(float3 x, float3 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) int4
isunordered(float4 x, float4 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) int8
isunordered(float8 x, float8 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) int16
isunordered(float16 x, float16 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) int
isunordered(double x, double y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) long2
isunordered(double2 x, double2 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) long3
isunordered(double3 x, double3 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) long4
isunordered(double4 x, double4 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) long8
isunordered(double8 x, double8 y)
{
    return isnan(x) | isnan(y);
}

__attribute__((overloadable, weak, always_inline)) long16
isunordered(double16 x, double16 y)
{
    return isnan(x) | isnan(y);
}

#endif //USE_APPLE or GPU_NO_RELATIONAL

#if defined GPU_NO_RELATIONAL

__attribute__((overloadable, weak, always_inline)) int
isequal(float x, float y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int2
isequal(float2 x, float2 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int3
isequal(float3 x, float3 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int4
isequal(float4 x, float4 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int8
isequal(float8 x, float8 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int16
isequal(float16 x, float16 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int
isequal(double x, double y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) long2
isequal(double2 x, double2 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) long3
isequal(double3 x, double3 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) long4
isequal(double4 x, double4 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) long8
isequal(double8 x, double8 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) long16
isequal(double16 x, double16 y)
{
    return x == y;
}

__attribute__((overloadable, weak, always_inline)) int
isnotequal(float x, float y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int2
isnotequal(float2 x, float2 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int3
isnotequal(float3 x, float3 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int4
isnotequal(float4 x, float4 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int8
isnotequal(float8 x, float8 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int16
isnotequal(float16 x, float16 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int
isnotequal(double x, double y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) long2
isnotequal(double2 x, double2 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) long3
isnotequal(double3 x, double3 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) long4
isnotequal(double4 x, double4 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) long8
isnotequal(double8 x, double8 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) long16
isnotequal(double16 x, double16 y)
{
    return x != y;
}

__attribute__((overloadable, weak, always_inline)) int
isgreater(float x, float y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int2
isgreater(float2 x, float2 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int3
isgreater(float3 x, float3 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int4
isgreater(float4 x, float4 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int8
isgreater(float8 x, float8 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int16
isgreater(float16 x, float16 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int
isgreater(double x, double y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) long2
isgreater(double2 x, double2 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) long3
isgreater(double3 x, double3 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) long4
isgreater(double4 x, double4 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) long8
isgreater(double8 x, double8 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) long16
isgreater(double16 x, double16 y)
{
    return x > y;
}

__attribute__((overloadable, weak, always_inline)) int
isgreaterequal(float x, float y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int2
isgreaterequal(float2 x, float2 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int3
isgreaterequal(float3 x, float3 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int4
isgreaterequal(float4 x, float4 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int8
isgreaterequal(float8 x, float8 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int16
isgreaterequal(float16 x, float16 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int
isgreaterequal(double x, double y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) long2
isgreaterequal(double2 x, double2 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) long3
isgreaterequal(double3 x, double3 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) long4
isgreaterequal(double4 x, double4 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) long8
isgreaterequal(double8 x, double8 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) long16
isgreaterequal(double16 x, double16 y)
{
    return x >= y;
}

__attribute__((overloadable, weak, always_inline)) int
isless(float x, float y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int2
isless(float2 x, float2 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int3
isless(float3 x, float3 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int4
isless(float4 x, float4 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int8
isless(float8 x, float8 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int16
isless(float16 x, float16 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int
isless(double x, double y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) long2
isless(double2 x, double2 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) long3
isless(double3 x, double3 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) long4
isless(double4 x, double4 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) long8
isless(double8 x, double8 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) long16
isless(double16 x, double16 y)
{
    return x < y;
}

__attribute__((overloadable, weak, always_inline)) int
islessequal(float x, float y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) int2
islessequal(float2 x, float2 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) int3
islessequal(float3 x, float3 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) int4
islessequal(float4 x, float4 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) int8
islessequal(float8 x, float8 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) int16
islessequal(float16 x, float16 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) int
islessequal(double x, double y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) long2
islessequal(double2 x, double2 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) long3
islessequal(double3 x, double3 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) long4
islessequal(double4 x, double4 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) long8
islessequal(double8 x, double8 y)
{
    return x <= y;
}

__attribute__((overloadable, weak, always_inline)) long16
islessequal(double16 x, double16 y)
{
    return x <= y;
}

#endif // GPU_NO_RELATIONAL

#if defined USE_APPLE || defined GPU_NO_RELATIONAL

__attribute__((overloadable, weak, always_inline)) int
islessgreater(float x, float y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int2
islessgreater(float2 x, float2 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int3
islessgreater(float3 x, float3 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int4
islessgreater(float4 x, float4 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int8
islessgreater(float8 x, float8 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int16
islessgreater(float16 x, float16 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int
islessgreater(double x, double y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) long2
islessgreater(double2 x, double2 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) long3
islessgreater(double3 x, double3 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) long4
islessgreater(double4 x, double4 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) long8
islessgreater(double8 x, double8 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) long16
islessgreater(double16 x, double16 y)
{
    return x < y | y < x;
}

__attribute__((overloadable, weak, always_inline)) int
isnan(float x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) int2
isnan(float2 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) int3
isnan(float3 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) int4
isnan(float4 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) int8
isnan(float8 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) int16
isnan(float16 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) int
isnan(double x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) long2
isnan(double2 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) long3
isnan(double3 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) long4
isnan(double4 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) long8
isnan(double8 x)
{
    return x != x;
}

__attribute__((overloadable, weak, always_inline)) long16
isnan(double16 x)
{
    return x != x;
}
#endif //USE_APPLE or defined GPU_NO_RELATIONAL
